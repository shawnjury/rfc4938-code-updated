dnl Process this file with autoconf to produce a configure script.
dnl LIC: GPL
AC_INIT(pppoe.c)
AC_CONFIG_SRCDIR(config.h.in)
AC_CONFIG_HEADER(config.h)

AC_PREFIX_DEFAULT(/usr)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB

dnl Checks for libraries.
AC_HEADER_DIRENT
dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(netinet/in.h stdlib.h string.h fcntl.h sys/dlpi.h sys/ioctl.h sys/time.h syslog.h unistd.h net/if_arp.h netinet/if_ether.h getopt.h sys/uio.h sys/param.h fcntl.h net/bpf.h netpacket/packet.h net/ethernet.h asm/types.h linux/if_packet.h linux/if_ether.h sys/socket.h sys/cdefs.h net/if.h net/if_dl.h net/if_ether.h net/if_types.h netinet/if_ether.h net/if_types.h net/if_dl.h)
AC_CHECK_HEADERS(linux/if.h, [], [], [#include<sys/socket.h>])
AC_CHECK_HEADERS(linux/if_pppox.h, [], [],
[
#include<sys/socket.h>
#include<net/ethernet.h>
#include<linux/if.h>
])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_INLINE
AC_C_CONST
AC_TYPE_PID_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Check for sockaddr_ll
AC_MSG_CHECKING(for struct sockaddr_ll)
AC_TRY_COMPILE([#include <asm/types.h>
#include <linux/if_packet.h>
#include <linux/if_ether.h>
], [struct sockaddr_ll sa;],
ac_cv_struct_sockaddr_ll=yes,
ac_cv_struct_sockaddr_ll=no)
AC_MSG_RESULT($ac_cv_struct_sockaddr_ll)

if test "$ac_cv_struct_sockaddr_ll" = yes ; then
AC_DEFINE(HAVE_STRUCT_SOCKADDR_LL)
fi

dnl Check for N_HDLC line discipline
AC_MSG_CHECKING(for N_HDLC line discipline)
AC_TRY_COMPILE([#include <linux/termios.h>],
	[int x = N_HDLC;],
	ac_cv_n_hdlc=yes,
	ac_cv_n_hdlc=no)
AC_MSG_RESULT($ac_cv_n_hdlc)
if test "$ac_cv_n_hdlc" = yes ; then
AC_DEFINE(HAVE_N_HDLC)
fi

AC_ARG_ENABLE(plugin, [  --enable-plugin=pppd_src_path   build pppd plugin], ac_cv_pluginpath=$enableval, ac_cv_pluginpath=no)
AC_ARG_ENABLE(debugging, [  --disable-debugging             disable debugging code], ac_cv_debugging=$enableval, ac_cv_debugging=yes)
dnl If we were given "--enable-plugin" without a path, take a stab at where
dnl the pppd source code might be.

if test "$ac_cv_pluginpath" = "yes" ; then
	AC_PATH_PROG(PPPD_H, pppd/pppd.h, NOTFOUND, "/usr/include:/usr/local/include:$PATH:../../$PPPD_DIR")
	if test "$PPPD_H" = "NOTFOUND" ; then
	    ac_cv_pluginpath=no
	else
	    ac_cv_pluginpath=`dirname "$PPPD_H"`
	    ac_cv_pluginpath=`dirname "$ac_cv_pluginpath"`
	fi
fi

AC_ARG_ENABLE(licenses, [  --enable-licenses=lic_path      build commercial version], ac_cv_licpath=$enableval, ac_cv_licpath=no)

LIC_INCDIR=""
LIC_LIBDIR=""
LIC_LIB=""
LIC_DEFINE=""
LIC_MAKEFILE_INCLUDE=""
PPPOE_SERVER_DEPS=""
if test "$ac_cv_licpath" != "no" ; then
	LIC_INCDIR="-I$ac_cv_licpath"
	LIC_LIBDIR="-L$ac_cv_licpath -Llicensed-only"
	if test -d "../../extra-libs" ; then
	    LIC_LIB="-L../../extra-libs -ltwofish -llicensed-only -ltcl -ldl"
	else
	    LIC_LIB="-ltwofish -llicensed-only -ltcl -ldl"
	fi
	PPPOE_SERVER_DEPS="licensed-only/liblicensed-only.a ../../SERVPOET-VERSION"
	LIC_DEFINE="-DHAVE_LICENSE=1 -DSERVPOET_VERSION='\"\$(SERVPOET_VERSION)\"'"
	LIC_MAKEFILE_INCLUDE="include ../../SERVPOET-VERSION"
fi

if test "$ac_cv_debugging" = "yes" ; then  	 
   AC_DEFINE(DEBUGGING_ENABLED) 	 
fi

dnl Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(inet_ntoa memset select socket strerror strtol)
AC_PROG_INSTALL

dnl Integer sizes
AC_CHECK_SIZEOF(unsigned short)
AC_CHECK_SIZEOF(unsigned int)
AC_CHECK_SIZEOF(unsigned long)

dnl Check for setsid (probably Linux-specific)
AC_PATH_PROG(SETSID, setsid, "", $PATH:/sbin:/usr/sbin:/usr/local/sbin)

dnl Check for an "id" which accepts "-u" option -- hack for Solaris.
AC_PATH_PROG(ID, id, "", /usr/xpg4/bin:$PATH)

dnl GCC warning level
if test "$GCC" = yes; then
	CFLAGS="$CFLAGS -Wall -Wstrict-prototypes "
fi

dnl Figure out packing order of structures
AC_MSG_CHECKING([packing order of bit fields])
AC_TRY_RUN([
union foo {
    struct bar {
	unsigned int ver:4;
	unsigned int type:4;
    } bb;
    unsigned char baz;
};

int
main(void)
{
    union foo x;
    x.bb.ver = 1;
    x.bb.type = 2;
    if (x.baz == 0x21) {
	return 1;
    } else if (x.baz == 0x12) {
	return 0;
    } else {
	return 2;
    }
}], rpppoe_cv_pack_bitfields=normal, rpppoe_cv_pack_bitfields=rev,
rpppoe_cv_pack_bitfields="$ac_cv_pack_bitfields")

if test "$rpppoe_cv_pack_bitfields" = "rev" ; then
	AC_MSG_RESULT(reversed)
	AC_DEFINE(PACK_BITFIELDS_REVERSED)
else
	AC_MSG_RESULT(normal)
fi

if test "$ac_cv_debugging" = "yes" ; then
   AC_DEFINE(DEBUGGING_ENABLED)
fi

# Sigh... got to fix this up for tcl
test "x$prefix" = xNONE && prefix=$ac_default_prefix
# Let make expand exec_prefix.
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'

# Fully resolve WRAPPER for Tcl script.
WRAPPER=${sbindir}/pppoe-wrapper
eval "WRAPPER=${WRAPPER}"
eval "WRAPPER=${WRAPPER}"
AC_SUBST(WRAPPER)

# Determine what targets to build
TARGETS="pppoe"

datadir_evaluated=`eval echo $datadir`
AC_SUBST(datadir_evaluated)
AC_SUBST(TARGETS)

AC_OUTPUT(Makefile)

AC_MSG_RESULT([On this platform, the following targets will be built:])
AC_MSG_RESULT([$TARGETS])
AC_MSG_RESULT([Type 'make' to compile the software.])
